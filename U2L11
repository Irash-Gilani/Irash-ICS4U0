def addM(M1, M2):
    # M1 and M2 are arrays
    # should return an array which is the sum of M1 + M2
    sumarr = []
    for rownum in range(len(M1)):
      sumarr.append([0] * len(M1[0]))
    
    for rownum in range(len(M1)):
      for columnnum in range(len(M1[0])):
        sumarr[rownum][columnnum] = (M1[rownum][columnnum] + M2[rownum][columnnum])
    
    return sumarr
        

def isMagic(squarearr):
    # checks rows, columns and both diagonals to see if M is magic
    # this is a boolean function
      squareismagic = True
  
      sum = 0
      tempsum = 0
      
      
      # checking rows
      for rownum in range(len(squarearr)):
        
        tempsum = 0
        
        for columnnum in range(len(squarearr[0])):
          if rownum == 0:
            sum += squarearr[rownum][columnnum]
          tempsum += squarearr[rownum][columnnum]
        
          
        
        if tempsum != sum:
          squareismagic = False
        
        
      #checking columns
      sum = 0
      
      for columnnum in range(len(squarearr)):
        
        tempsum = 0
        
        for rownum in range(len(squarearr[0])):
          if columnnum == 0:
            sum += squarearr[rownum][columnnum]
          tempsum += squarearr[rownum][columnnum]
          
        if tempsum != sum:
          squareismagic = False
          
      # checking diagonals
      
      LtoRsum = 0
      RtoLsum = 0
      
      # retrieves diagonal count from left to right
      for diagcount in range(len(squarearr)):
        
        LtoRsum += squarearr[diagcount][diagcount]
        
      # retrieves diagonal count from right to left, then compares with first count
      for diagcount in range(len(squarearr) - 1, -1, -1):
        RtoLsum += squarearr[diagcount][diagcount]
        
      if LtoRsum != RtoLsum:
        squareismagic = False
        
      if squareismagic == True:
        return ("square is magic, magic number is %d" % sum)
      else:
        return "square is not magic"

def make5x5(M, shift):
    # M = a 1D matrix of length n
    # shift = the amount of shifting of values in forming an n x n matrix
    
    shiftedarr = []
    for rownum in range(len(M)):
      shiftedarr.append([0] * len(M))
      
    shiftby = 0
    
    for rownum in range(len(M)):
      for val in range(len(M)):
        shiftedval = (val + shiftby) % (len(M))
        shiftedarr[rownum][val] = M[shiftedval]
      shiftby += shift
    return shiftedarr
      
    
a1 = [5, 1, 4, 2, 3]    # the first row of matrix A
b1 = [15, 20, 0, 10, 5] # the first row of matrix B

A = make5x5(a1, 3) # how to call "make5x5"
print("A =", A)
B = make5x5(b1, 2)
print("B =", B)
print()

print("Sum =", addM(A, B))
print()

print(isMagic(addM(A, B)))
