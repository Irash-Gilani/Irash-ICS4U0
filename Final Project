# polynomial.py starts here

# Irash Gilani
# 846852
# Polynomial Object for the Final Project

# Variable Dictionary:
#
#
#
#
#
#
#
#

class Polynomial:
    def __init__(self, coefficients):
        # the input variable "coefficients" is an array
        # the coefficients are assumed to be in standard form 
        self.__coeffs = []
        
        # the code below is for ignoring the leading zeroes in the input list,
        # then appending the rest of the numbers to self.__coeffs
        self.__pastleadingzeroes = False
        
        for idx in range(len(coefficients)):
            if coefficients[idx] != 0:
                self.__pastleadingzeroes = True
            if self.__pastleadingzeroes == True:
                self.__coeffs.append(coefficients[idx])
                
    def get_order(self):
    # a function for getting the order of the polynomial
        self.__order = 0
        
        for idx in range(len(self.__coeffs) - 1):
        # ends one unit less than the length due to the last
        # coefficient not counting in the order    
            
            
            if self.__coeffs[idx] != 0 and idx != len(self.__coeffs):
                # if the current value in the loop does not equal zero and is
                # not the last number in the polynomial, add the order of the
                # coefficient to self.__order
                #print((len(self.__coeffs) - 1)- idx)
                self.__order += ((len(self.__coeffs) - 1) - idx)
                
        return self.__order
    
    def f(self, x):
    # a function for getting the value of y using the polynomial and an
    # inputted x value 
        self.__y = 0
        self.__exponent = 0
        
        for idx in range(len(self.__coeffs) - 1, -1, -1):
            # a for loop that goes from the last coefficient in self.__coeffs
            # to the first coefficient
            
            if idx == len(self.__coeffs) - 1:
                # if the loop is on the last coefficient in self.__coeffs,
                # add the coefficient times x without an exponent
                self.__y += self.__coeffs[idx] * x
            else:
                # if the loop is on any other number, the exponent is increased by one
                # with every step, and is 
                self.__exponent += 1
                self.__y += (self.__coeffs[idx]) * x**self.__exponent
        
        return self.__y
                
                
    
    def __str__(self):
        # a function for printing the polynomial including its exponents
        self.__polystring = ""
        self.__index = 0
        
        for exp in range(len(self.__coeffs) - 1, -1, -1):
            # goes backwards through self.__coeffs, using the step value as the exponent and increasing
            # self.__index by one with each step, and adding each value in the polynomial using the
            # exponent and self.__index
            self.__polystring += (("%dx^%d" % (self.__coeffs[self.__index], exp)))
            self.__index += 1
            
            if exp != 0:
                # adds a plus sign if the loop is not on the last value in self.__coeffs
                self.__polystring += " + "
        
        return self.__polystring
                
                
            
        
# polynomial.py ends here

# IVT.py starts here

# Irash Gilani
# 846852
# IVT Object for the Final Project

# Variable Dictionary:
#
#
#
#
#
#
#

#from polynomial import Polynomial

class IVT:
# an object for approximating the zeroes of a polynomial using
# two x values
    def __init__(self, x1, x2):
        self.__x1 = x1
        self.__x2 = x2
        # self.__x1 is assumed to be smaller than self.__x2
        self.__preconditionsmet = False
        
        # below code is for checking if the preconditions are met
        if self.__x1 != self.__x2:
        # first precondition is whether or not x1 is unequal to x2
        # if the first precondition is true, move on to the next precondition
            self.__y1 = Polynomial.f(self.__x1)
            self.__y2 = Polynomial.f(self.__x2)
            
            if ((self.__y1 > 0 and self.__y2 < 0) or (self.__y1 < 0 and self.__y2 > 0)):
            # second precondition is whether or not f(x1) has an opposite sign to f(x2),
            # this is checked by looking at whether or not the two variables are smaller and bigger
            # than zero
                self.__preconditionsmet = True
        

# IVT.py ends here

# polynomial driver starts here

# Irash Gilani
# 846852
# Driver Code for the Polynomial Object in the Final Project

# Variable Dictionary:
#
#
#
#
#
#
#

#from polynomial import Polynomial

P = Polynomial([0, 0, 1, 2, 0, 3, 0, 0])
print(P)
for i in range(10):
 print(i, P.f(i))
print("The order is", P.get_order())

# polynomial driver ends here

# ivtdriver.py starts here

# Irash Gilani
# 846852
# Driver Code for the IVT Object in the Final Project

# Variable Dictionary:
#
#
#
#
#
#
#

# ivtdriver.py ends here
