import turtle

def stripline(ln):
    finalln = ""
    badChars = ['"', ',']
    ln = ln.strip()
    
    for char in ln:
        if char not in badChars:
            finalln += char
            
    return finalln

def plotpoint(obj, step, colour):
    obj.pendown()
    obj.dot(step, colour)
    obj.penup()

try:
    #fh = open("smiley_emoji_mod.xpm", "r")
    #fh = open("cool_smiley_mod.xpm", "r")
    fh = open("rocky_bullwinkle_mod.xpm", "r")
    
    imginfo = fh.readline()
    imginfo = stripline(imginfo)
    
    [columns, rows, colours] = imginfo.split()
    columns = int(columns)
    rows = int(rows)
    colours = int(colours)
    
    colourdat = {}
    
    for i in range(colours):
        cLine = fh.readline()
        cLine = stripline(cLine)
        [symbol, c, colour] = cLine.split()
        
        colourdat[symbol] = colour
        
    imagerowarr = []
        
    for rownum in range(rows):
        imagerowarr.append(stripline(fh.readline()))
            
    fh.close()
except OSError:
    print("Error: File not found")
except EOFError:
    print("Error: End of file exceeded")
    fh.close()


t = turtle.Turtle()
turtle.bgcolor("gray80")
turtle.tracer(0, 0)
t.hideturtle()
step = 4

t.penup()
t.forward(-(columns / 2) * step)
t.left(90)
t.forward(rows / 2 * step)
t.right(90)

for rownum in range(rows):
    if rownum > 0:
        t.forward(-(columns) * step)
        t.right(90)
        t.forward(step)
        t.left(90)
    for columnum in range(columns):
        if imagerowarr[rownum][columnum] == ' ':
            plotpoint(t, step, "black")
        else:
            plotpoint(t, step, colourdat[imagerowarr[rownum][columnum]])
        t.forward(step)

turtle.update()
